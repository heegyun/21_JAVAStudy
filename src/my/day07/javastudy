1. 생성자(constructor)
 - 객체를 생성할 때 호출
 - 멤버 변수 초기화 할때 호출
 1) 생성자 오버로딩(중복정의)
 - 다양한 초기값을 갖는 객체 생성 가능
 - 오버로딩 규칙: 메소드 이름은 같고, 매개변수의 갯수, 타입은 달라야 한다.
2. static 변수, 메소드
 - 클래스 변수, static 변수
 - 클래스 이름으로 접근 가능
3. 정보은닉
 - 접근 지정자(Access Modifier) public, protected, private, default
 - 멤버 변수(필드)와 메소드의 외부 접근을 막는 방법
 - 외부에 공개 하고자 할때는 getter, setter 메소드를 정의한다.
 예) class Account{
        // 데이터(필드) 은닉
      private String password;
      private int balance;

      public void setPassword(String pwd){
        password = pwd;
      }
      public void setBalance(int bal){
        balance = bal;
      }
      public String getPassword(){
        return password;
      }
      public int getBalance(){
        return balance;
      }
    }
4. 배열(Array): 동일한 데이터를 하나의 이름(배열명)으로 관리하는 구조
    - 자바의 배열은 참조변수형으로 사용해야함.(즉, new 연산자와 함께사용)
    - 기본 (자료형) 배열 : int [] intArray = new int[10];
    - 객체 (자료형) 배열 : Account[] accounts = new Account[10];
    - 배열 사용은 인덱스로 사용 (for반복문 함께 사용)
1) 다차원 배열
    - 배열의 배열: 같은 자료형인데 1차원배열이 같은 자료형이된다.
    - 학생2명의 3과목 성적 처리: int[][] scores = new int[2][3];
    - 2차원배열 형식: 자료형[][] 배열이름 = new 자료형[행개수][열개수];
    - 기본형 2차원배열
     int [][] arr = {{100,90,50},{70,60,80}}// 2차원배열 선언과 동시에 초기화
     행의 길이: 배열이름.length
     열의 길이: 각 행의길이(배열이름[0].lenth)
2) 기본 배열의 단점: 프로그램에서 사용하려면 항상 배열 길이를 정하고 시작한다.
   - 처음 100명의 학생을 위한 프로그램을 개발했는데 어느 순간 학생수가 100명이 넘었다. 배열을 사용하는 중에는 배열 길이를 변경할 수
   없기 때문에 코드를 수정해야 한다. 혹은 중간에 학생 한명이 전학을 갔다. 배열은 중간에 있는 요소를 비워 둘 수 없으므로
   배열 요소 위치를 변경해야 한다. 이러한 두가지 경우 모두 배열을 하나하나 수정하려면 힘들고 복잡하다..

   - 그래서 이러한 문제점을 해결하기 위해 자바는 객체배열을 좀 더 쉽게 사용할 수 있도록 객체 배열 클래스 ArrayList 를제공한다.
   - ArrayList 클래스는 객체 배열을 관리할 수 있는 멤버변수와메소드를 제공하므로 사용 방법만 알아두면 편리하게 사용할 수 있다.
   - 형식: ArrayList<E> 배열이름 = new ArrayList<E>(); E: 제네릭 자료형
   - 가장 많이 사용되는메소드
   참조변수.add(데이터)
   int size()
   참조변수.get(인덱스번호)
   참조변수. remove(인덱스번호)
   - 배열을 위한 반복문
   for ~ each 반복문: jdk 5 부터 도입된 for문을 개선한 방식 특정원소를 나타내기 위한 인덱스를 사용하지 않는다.
   for (데이터 타입 변수 : 배열 혹은 컬렉션){
    }



